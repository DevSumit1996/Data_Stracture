
// linked list implementation
#include<bits/stdc++.h>

class Node{
    public:
    int data;
    Node* next;
    Node(){
        this->data=0;
        this->next=NULL;
    }
};
class Linked_List{
    public:
    Node* head;
    int length;
    void pushBack(int data);
    bool insert(int data);
    void reverse();
     ~Linked_List();
     void swap(int data1,int data2);
     Node* NodeRef_AccTData(int data);
    void print();
    int size();
    void insert_After(int index,int data);
    void delete_AtIndex(int index);
    Node* NodeRef_AtIndex(int index);
    Linked_List();
};
Node* Linked_List::NodeRef_AccTData(int data){
    Node* temp=this->head;
    while(temp->next->data!=data){
        temp=temp->next;
    }
    return temp;
}
void Linked_List:: reverse(){
    Node* current,*prev,*next;
   // prev=NULL;
    current=this->head;
    prev=NULL;
    while(current!=NULL){
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    this->head=prev;
    return;
}
void Linked_List::swap(int data1,int data2){
    Node* temp1=this->NodeRef_AccTData(data1);
    Node* temp2=this->NodeRef_AccTData(data2);
    Node* firstNodeRef=temp1->next;
    Node* secondNodeRef=temp2->next;
    Node* temp=firstNodeRef->next;
    temp1->next=secondNodeRef;
    firstNodeRef->next=secondNodeRef->next;
    secondNodeRef->next=temp;
    temp2->next=firstNodeRef;
    return;
    
}
void Linked_List::delete_AtIndex(int index){
    Node* temp=NodeRef_AtIndex(index-1);
    temp->next=temp->next->next;
    this->length--;
    return;
}
void Linked_List::pushBack(int data){
    Node* temp=this->head;
    while(temp->next!=NULL){
       temp=temp->next; 
    }
    Node* node=new Node();
    node->data=data;
    node->next=temp->next;
    temp->next=node;
    this->length++;
    return;
}
Node* Linked_List::NodeRef_AtIndex(int index){
    Node* head=this->head;
    while(--index){
        head=head->next;
    }
    return head;
}
void Linked_List::insert_After(int index,int data){
    Node* temp=this->NodeRef_AtIndex(index);
    Node* node=new Node();
    node->data=data;
    node->next=temp->next;
    temp->next=node;
    this->length++;
    return;
}
Linked_List::Linked_List(){
    this->head=NULL;
    this->length=0;
}
bool Linked_List::insert(int data){
    Node* node=new Node();
    node->data=data;
    node->next=this->head;
    this->head=node;
    this->length++;
    return true;
}
 Linked_List::~Linked_List(){
    std::cout<<"deleted"<<std::endl;
}
void Linked_List::print(){
    Node* temp=this->head;
    while(temp!=NULL){
        std::cout<<temp->data<<" ";
        temp=temp->next;
    }
}



int main(){
    Linked_List* list=new Linked_List();
    for(int i=1;i<9;i++){
        list->insert(i);
    }
    std::cout<<std::endl;   
    list->print();
   list->reverse();
    //list->print();
    //list->insert_After(7,112);
    //list->pushBack(234);
    //list->delete_AtIndex(5);
    //list->print();
   // list->swap(2,5);
   
    list->print();
    std::cout<<std::endl;
    std::cout<<list->length;
    return 0;
}
